#1. Escribe un programa de lea 10 numeros y determine si cada uno es positivo, negativo o cero utilizando la estructura if

for (i in 1:10) {
  num <- as.numeric(readline(prompt = "Introduce un número: "))
  
  if (num > 0) {
    print("El número es positivo")
  } else if (num < 0) {
    print("El número es negativo")
  } else {
    print("El número es cero")
  }
}

#2. Genera una lista de 100 numeros enteros aleatorios. Usa un bucle for para recorrer la lita y una estructura if para contar cuantos son pares y cuantos son impares

numeros <- sample(1:100, 100)

pares <- 0
impares <- 0


for (num in numeros) {
  if (num %% 2 == 0) {
    pares <- pares + 1
  } else {
    impares <- impares + 1
  }
}

cat("Números pares:", pares, "\n")
cat("Números impares:", impares, "\n")


#3. Escribe un programa que pida al usuario un numero N e imprima la suma de los numeros del 1 al N usando un bucle FOR

N <- as.numeric(readline(prompt = "Introduce un número N: "))

suma <- 0


for (i in 1:N) {
  suma <- suma + i
}

cat("La suma de los números del 1 al", N, "es:", suma, "\n")

#4. Utiiza un bucle while para generar los primeros 20 numeros de la secuncia de fibonacci y mostrar el resultado en pantalla

fibonacci <- numeric(20)
fibonacci[1] <- 0
fibonacci[2] <- 1

i <- 3

while (i <= 20) {
  fibonacci[i] <- fibonacci[i - 1] + fibonacci[i - 2]
  i <- i + 1
}

print(fibonacci)

#5. Escribe un programa que calcule el factorial de un numero N introducido por el usuario usando un bucle for.

N <- as.numeric(readline(prompt = "Introduce un número para calcular su factorial: "))

factorial <- 1


for (i in 1:N) {
  factorial <- factorial * i
}

cat("El factorial de", N, "es:", factorial, "\n")


#6. Implementa un juego donde el programa elige un número entre 1 y 100. El usuario debe adivinar el número, y el programa debe dar pistas
# de si el número ingresado es "mayor" o "menor" que el número secreto utilizando un bucle while y la estructura if.

numero_secreto <- sample(1:100, 1)
intento <- as.numeric(readline(prompt = "Adivina el número (entre 1 y 100): "))

while (intento != numero_secreto) {
  if (intento < numero_secreto) {
    intento <- as.numeric(readline(prompt = "Es mayor. Inténtalo de nuevo: "))
  } else {
    intento <- as.numeric(readline(prompt = "Es menor. Inténtalo de nuevo: "))
  }
}

cat("¡Felicidades! Adivinaste el número:", numero_secreto, "\n")

#7. Crea un sistema de autenticación que pida una contraseña y permita tres intentos antes de bloquear al usuario. Utiliza un bucle while 
# que verifique si la contraseña ingresada es correcta o no.

contraseña_correcta <- "1234"
intentos <- 0

while (intentos < 3) {
  contraseña <- readline(prompt = "Introduce la contraseña: ")
  
  if (contraseña == contraseña_correcta) {
    cat("Contraseña correcta. Bienvenido.\n")
    break
  } else {
    intentos <- intentos + 1
    cat("Contraseña incorrecta. Intentos restantes:", 3 - intentos, "\n")
  }
  
  if (intentos == 3) {
    cat("Acceso bloqueado.\n")
  }
}

#8. Pide al usuario que ingrese un número entero y utiliza un bucle while para sumar los dígitos del número.
# Por ejemplo, si el número es 1234, la suma sería 1+2+3+4 = 10.

numero <- as.numeric(readline(prompt = "Introduce un número: "))
suma <- 0

while (numero > 0) {
  suma <- suma + (numero %% 10)
  numero <- floor(numero / 10)
}

cat("La suma de los dígitos es:", suma, "\n")

#9. Utiliza un bucle for para imprimir un patrón en pantalla, como un triángulo o una pirámide de asteriscos.

for (i in 1:5) {
  for (j in 1:i) {
    cat("*")
  }
  cat("\n")
}

#10.Escribe un programa que imprima todos los números primos entre 1 y 100. Usa un bucle for para iterar por los números y una estructura if para verificar si cada número es primo.

es_primo <- function(n) {
  if (n < 2) {
    return(FALSE)
  }
  for (i in 2:sqrt(n)) {
    if (n %% i == 0) {
      return(FALSE)
    }
  }
  return(TRUE)
}

for (num in 1:100) {
  if (es_primo(num)) {
    cat(num, "es un número primo\n")
  }
}
